{"version":3,"sources":["webpack:///./src/pages/tree-view.js"],"names":["initialState","node","undefined","open","name","reducer","state","type","TreeView","isLoaded","useSelector","sourcesReducer","useReducer","stateDispatch","dispatch","useDispatch","sources","shallowEqual","sourceTypes","details","useEffect","loadSourceTypes","loadSourcesAction","treeData","createTreeData","item","infoNode","structureNode","Array","isArray","map","source","children","forEach","child","length","push","label","id","subItem","attributes","transformLabel","key","isSelectable","data","close","to","paths","index","isActive","onSelect","e","parent","category","loadItemDetail"],"mappings":"20BAeA,IAgCMA,EAAe,CACnBC,UAAMC,EACNC,MAAM,EACNC,UAAMF,GAGFG,EAAU,SAACC,EAAD,GAAiC,IAAvBC,EAAuB,EAAvBA,KAAMN,EAAiB,EAAjBA,KAAMG,EAAW,EAAXA,KACpC,OAAQG,GACN,IAAK,WACH,cACKD,GADL,IAEEL,OACAG,OACAD,MAAM,IAEV,IAAK,YACH,cACKG,GADL,IAEEH,MAAM,MAiECK,UA5DE,WACf,IAAMC,EAAWC,aAAY,qBAAGC,eAAkBF,YAD7B,EAEyBG,qBAAWP,EAASL,GAF7C,kBAEZI,EAFY,EAEZA,KAAMH,EAFM,EAENA,KAAME,EAFA,EAEAA,KAAQU,EAFR,KAGfC,EAAWC,cACXC,EAAUN,aAAY,qBAAGC,eAAoCK,UAASC,KACtEC,EAAcR,aAAY,qBAAGC,eAAoCO,cAAaD,KAC9EE,EAAUT,aAAY,qBAAGC,eAAoCQ,UAASF,KAS5E,GAPAG,qBAAU,WACHX,IACHK,EAASO,eACTP,EAASQ,kBAEV,KAEEb,EACH,OAAO,kBAAC,IAAD,MAGT,IAAMc,EA1Ee,SAAjBC,EAAkBC,GAAqD,MAA/CC,EAA+C,uDAApCC,IAAeT,EAAqB,uDAAP,GACpE,GAAIU,MAAMC,QAAQJ,GAChB,OAAOA,EAAKK,KAAI,SAACC,GAAD,OAAYP,EAAeO,EAAQL,EAAUR,MAG/D,IAAMc,EAAW,GAEjB,UAAAN,EAASM,gBAAT,SAAmBC,SAAQ,SAACC,GAAU,MACF,GAA9B,UAAAT,EAAKS,EAAM9B,aAAX,eAAkB+B,QAAS,GAC7BH,EAASI,KAAK,CACZhC,KAAM8B,EAAMG,MACZC,GAAIJ,EAAM9B,KACV4B,SAAQ,UAAEP,EAAKS,EAAM9B,aAAb,aAAE,EAAkB0B,KAAI,SAACS,GAAD,OAAaf,EAAee,EAASL,EAAOhB,WAKlF,IAAId,EAAQsB,EAASc,YAAcf,EAAKC,EAASc,WAAW,KAAQf,EAAKrB,MAAQqB,EAAKa,GAMtF,OAJIZ,EAASe,iBACXrC,EAAOsB,EAASe,eAAehB,EAAMP,IAGvC,KACEoB,GAAIb,EAAKa,GACTI,IAAKjB,EAAKa,GACVlC,QACI4B,EAASG,OAAS,EAAI,CAAEH,YAAa,IAJ3C,IAKEW,cAAc,IA8CCnB,CAAeR,EAASW,IAAeT,GAExD,OACE,kBAAC,IAAD,CACEf,KAAMA,EACNyC,KAAMzB,EAAQlB,GACdA,KAAMA,EACN4C,MAAO,kBAAMhC,EAAc,CAAEN,KAAM,eACnCH,KAAMA,GAEN,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAM0C,GAAIC,IAAMC,OAAhB,uBAEF,kBAAC,IAAD,CAAgBC,UAAQ,GAAxB,eAGJ,kBAAC,IAAD,eAEE,kBAAC,IAAD,CACEL,KAAMrB,EACN2B,SAAU,SAACC,EAAG1B,EAAM2B,GAClB,GAAI3B,EAAKkB,aAAc,CACrB,IAAMU,GAAWD,aAAA,EAAAA,EAAQd,KAAM,UAC/BzB,EAAc,CACZN,KAAM,WACNH,KAAMqB,EAAKrB,KACXH,KAAM,GAAF,OAAKoD,EAAL,YAAiB5B,EAAKa,MAE5BxB,EAASwC,YAAeD,EAAU5B,EAAKa","file":"js/10.8c0a9eaa507b6b3b326f.js","sourcesContent":["import React, { useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\n\nimport { Link } from 'react-router-dom';\nimport { Card, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nimport { structureNode } from '../api/topology-viewer-api';\n\nimport CardLoader from '../components/loaders/card-loader';\nimport { paths } from '../routes';\nimport DetailDrawer from '../components/detail-drawer';\nimport { loadSourcesAction, loadSourceTypes, loadItemDetail } from '../store/actions';\n\nimport { TreeView as PFTreeView } from '@patternfly/react-core';\n\nconst createTreeData = (item, infoNode = structureNode, sourceTypes = []) => {\n  if (Array.isArray(item)) {\n    return item.map((source) => createTreeData(source, infoNode, sourceTypes));\n  }\n\n  const children = [];\n\n  infoNode.children?.forEach((child) => {\n    if (item[child.name]?.length > 0) {\n      children.push({\n        name: child.label,\n        id: child.name,\n        children: item[child.name]?.map((subItem) => createTreeData(subItem, child, sourceTypes)),\n      });\n    }\n  });\n\n  let name = (infoNode.attributes && item[infoNode.attributes[0]]) || item.name || item.id;\n\n  if (infoNode.transformLabel) {\n    name = infoNode.transformLabel(item, sourceTypes);\n  }\n\n  return {\n    id: item.id,\n    key: item.id,\n    name,\n    ...(children.length > 0 ? { children } : {}),\n    isSelectable: true,\n  };\n};\n\nconst initialState = {\n  node: undefined,\n  open: false,\n  name: undefined,\n};\n\nconst reducer = (state, { type, node, name }) => {\n  switch (type) {\n    case 'openNode':\n      return {\n        ...state,\n        node,\n        name,\n        open: true,\n      };\n    case 'closeNode':\n      return {\n        ...state,\n        open: false,\n      };\n  }\n};\n\nconst TreeView = () => {\n  const isLoaded = useSelector(({ sourcesReducer: { isLoaded } }) => isLoaded);\n  const [{ name, node, open }, stateDispatch] = useReducer(reducer, initialState);\n  const dispatch = useDispatch();\n  const sources = useSelector(({ sourcesReducer }) => sourcesReducer.sources, shallowEqual);\n  const sourceTypes = useSelector(({ sourcesReducer }) => sourcesReducer.sourceTypes, shallowEqual);\n  const details = useSelector(({ sourcesReducer }) => sourcesReducer.details, shallowEqual);\n\n  useEffect(() => {\n    if (!isLoaded) {\n      dispatch(loadSourceTypes());\n      dispatch(loadSourcesAction());\n    }\n  }, []);\n\n  if (!isLoaded) {\n    return <CardLoader />;\n  }\n\n  const treeData = createTreeData(sources, structureNode, sourceTypes);\n\n  return (\n    <DetailDrawer\n      open={open}\n      data={details[node]}\n      node={node}\n      close={() => stateDispatch({ type: 'closeNode' })}\n      name={name}\n    >\n      <Card>\n        <CardTitle>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={paths.index}>Topology Inventory</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>Tree view</BreadcrumbItem>\n          </Breadcrumb>\n        </CardTitle>\n        <CardBody>\n          Sources\n          <PFTreeView\n            data={treeData}\n            onSelect={(e, item, parent) => {\n              if (item.isSelectable) {\n                const category = parent?.id || 'sources';\n                stateDispatch({\n                  type: 'openNode',\n                  name: item.name,\n                  node: `${category}-${item.id}`,\n                });\n                dispatch(loadItemDetail(category, item.id));\n              }\n            }}\n          />\n        </CardBody>\n      </Card>\n    </DetailDrawer>\n  );\n};\n\nexport default TreeView;\n"],"sourceRoot":""}