{"version":3,"sources":["webpack:///./src/api/topology-viewer-api.js","webpack:///./src/store/actions.js","webpack:///./src/pages/tree-view.js","webpack:///./src/api/sources.js"],"names":["API","getAxtionsInstace","structureNode","name","transformLabel","node","sourceTypes","find","id","source_type_id","product_name","children","label","attributes","loadSourceQuery","createGraphQL","map","child","reducer","state","type","loading","open","TreeView","isLoaded","useSelector","sourcesReducer","useReducer","undefined","initialState","stateDispatch","dispatch","useDispatch","sources","shallowEqual","details","useEffect","a","get","SOURCES_API_BASE","LOAD_SOURCE_TYPES","payload","LOAD_SOURCE_TYPES_FAILED","post","TOPOLOGICAL_INVETORY_API_BASE","query","then","data","ids","additionalData","LOAD_DATA","source","treeData","createTreeData","item","infoNode","Array","isArray","forEach","length","push","subItem","key","isSelectable","close","Card","CardTitle","Breadcrumb","BreadcrumbItem","to","paths","index","isActive","CardBody","onSelect","e","parent","category","getState","LOAD_DETAIL_FULFILLED","LOAD_DETAIL_PENDING","detail","LOAD_DETAIL_FAILED","loadItemDetail"],"mappings":"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","file":"js/10.48d71ceedb1c3ba65b5e.js","sourcesContent":["import { getAxtionsInstace } from './api';\nimport { TOPOLOGICAL_INVETORY_API_BASE } from '../constants/api-constants';\n\nconst API = getAxtionsInstace();\n\nexport const structureNode = {\n  name: 'sources',\n  transformLabel: (node, sourceTypes) =>\n    `${node.name} (${sourceTypes?.find(({ id }) => id === node.source_type_id)?.product_name || node.source_type_id})`,\n  children: [\n    {\n      name: 'service_offerings',\n      label: 'Service offerings',\n      attributes: ['name'],\n    },\n    {\n      name: 'service_plans',\n      label: 'Service plans',\n      attributes: ['name'],\n    },\n    {\n      name: 'service_instances',\n      label: 'Service instances',\n      attributes: ['name'],\n    },\n    {\n      name: 'service_inventories',\n      label: 'Service inventories',\n      attributes: ['name'],\n    },\n    {\n      name: 'service_instance_nodes',\n      label: 'Service instance nodes',\n      attributes: ['name'],\n    },\n    {\n      name: 'service_offering_nodes',\n      label: 'Service offering nodes',\n      attributes: ['name'],\n    },\n    {\n      name: 'vms',\n      label: 'Virtual machines',\n      attributes: ['name'],\n      children: [\n        {\n          name: 'network_adapters',\n          label: 'Network adapters',\n        },\n        {\n          name: 'security_groups',\n          label: 'Security groups',\n          attributes: ['name'],\n        },\n      ],\n    },\n  ],\n};\n\nconst createGraphQL = (node) =>\n  `${node.name} {id,${node.attributes ? node.attributes : ''},${\n    node.children ? node.children.map((child) => createGraphQL(child)) : ''\n  }}`;\n\nconst loadSourceQuery = `{${createGraphQL(structureNode)}}`;\n\nexport const loadSources = () =>\n  API.post(`${TOPOLOGICAL_INVETORY_API_BASE}/graphql`, {\n    query: loadSourceQuery,\n  }).then(({ data }) => data);\n","import {\n  LOAD_DATA,\n  LOAD_SOURCE_TYPES,\n  LOAD_SOURCE_TYPES_FAILED,\n  LOAD_DETAIL_FULFILLED,\n  LOAD_DETAIL_FAILED,\n  LOAD_DETAIL_PENDING,\n} from './action-types/sources-action-types';\n\nimport { loadSources } from '../api/topology-viewer-api';\nimport { getSourcesTypes, getSourceTypes } from '../api/sources';\nimport { getAxtionsInstace } from '../api/api';\nimport { TOPOLOGICAL_INVETORY_API_BASE } from '../constants/api-constants';\n\nexport const loadSourcesAction = () => async (dispatch) => {\n  const data = await loadSources();\n\n  const additionalData = await getSourcesTypes(data.sources.map(({ id }) => id));\n\n  return dispatch({\n    type: LOAD_DATA,\n    payload: {\n      sources: data.sources.map((source) => {\n        return {\n          ...additionalData.sources.find(({ id }) => id === source.id),\n          ...source,\n        };\n      }),\n    },\n  });\n};\n\nexport const loadSourceTypes = () => async (dispatch) => {\n  try {\n    const sourceTypes = await getSourceTypes();\n    return dispatch({\n      type: LOAD_SOURCE_TYPES,\n      payload: sourceTypes,\n    });\n  } catch {\n    return dispatch({\n      type: LOAD_SOURCE_TYPES_FAILED,\n    });\n  }\n};\n\nexport const loadItemDetail = (name, id) => async (dispatch, getState) => {\n  const {\n    sourcesReducer: { details },\n  } = getState();\n\n  if (details[`${name}-${id}`]) {\n    return dispatch({\n      type: LOAD_DETAIL_FULFILLED,\n    });\n  }\n\n  dispatch({\n    type: LOAD_DETAIL_PENDING,\n  });\n\n  try {\n    const detail = await getAxtionsInstace().get(`${TOPOLOGICAL_INVETORY_API_BASE}/${name}/${id}`);\n    return dispatch({\n      type: LOAD_DETAIL_FULFILLED,\n      payload: {\n        [`${name}-${id}`]: detail,\n      },\n    });\n  } catch {\n    return dispatch({\n      type: LOAD_DETAIL_FAILED,\n    });\n  }\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\n\nimport { Link } from 'react-router-dom';\nimport { Card, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nimport { structureNode } from '../api/topology-viewer-api';\n\nimport CardLoader from '../components/loaders/card-loader';\nimport { paths } from '../routes';\nimport DetailDrawer from '../components/detail-drawer';\nimport { loadSourcesAction, loadSourceTypes, loadItemDetail } from '../store/actions';\n\nimport { TreeView as PFTreeView } from '@patternfly/react-core';\n\nconst createTreeData = (item, infoNode = structureNode, sourceTypes = []) => {\n  if (Array.isArray(item)) {\n    return item.map((source) => createTreeData(source, infoNode, sourceTypes));\n  }\n\n  const children = [];\n\n  infoNode.children?.forEach((child) => {\n    if (item[child.name]?.length > 0) {\n      children.push({\n        name: child.label,\n        id: child.name,\n        children: item[child.name]?.map((subItem) => createTreeData(subItem, child, sourceTypes)),\n      });\n    }\n  });\n\n  let name = item.name || item.id;\n\n  if (infoNode.transformLabel) {\n    name = infoNode.transformLabel(item, sourceTypes);\n  }\n\n  return {\n    id: item.id,\n    key: item.id,\n    name,\n    ...(children.length > 0 ? { children } : {}),\n    isSelectable: true,\n  };\n};\n\nconst initialState = (loading) => ({\n  loading,\n  node: undefined,\n  open: false,\n  name: undefined,\n});\n\nconst reducer = (state, { type, node, name }) => {\n  switch (type) {\n    case 'loadingFinished':\n      return {\n        ...state,\n        loading: false,\n      };\n    case 'openNode':\n      return {\n        ...state,\n        node,\n        name,\n        open: true,\n      };\n    case 'closeNode':\n      return {\n        ...state,\n        open: false,\n      };\n  }\n};\n\nconst TreeView = () => {\n  const isLoaded = useSelector(({ sourcesReducer: { isLoaded } }) => isLoaded);\n  const [{ loading, name, node, open }, stateDispatch] = useReducer(reducer, initialState(!isLoaded));\n  const dispatch = useDispatch();\n  const sources = useSelector(({ sourcesReducer }) => sourcesReducer.sources, shallowEqual);\n  const sourceTypes = useSelector(({ sourcesReducer }) => sourcesReducer.sourceTypes, shallowEqual);\n  const details = useSelector(({ sourcesReducer }) => sourcesReducer.details, shallowEqual);\n\n  useEffect(() => {\n    if (loading) {\n      dispatch(loadSourceTypes());\n      dispatch(loadSourcesAction()).then(() => {\n        stateDispatch({ type: 'loadingFinished' });\n      });\n    }\n  }, []);\n\n  if (loading) {\n    return <CardLoader />;\n  }\n\n  const treeData = createTreeData(sources, structureNode, sourceTypes);\n\n  return (\n    <DetailDrawer\n      open={open}\n      data={details[node]}\n      node={node}\n      close={() => stateDispatch({ type: 'closeNode' })}\n      name={name}\n    >\n      <Card>\n        <CardTitle>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={paths.index}>Topology Inventory</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>Tree view</BreadcrumbItem>\n          </Breadcrumb>\n        </CardTitle>\n        <CardBody>\n          Sources\n          <PFTreeView\n            data={treeData}\n            onSelect={(e, item, parent) => {\n              if (item.isSelectable) {\n                const category = parent?.id || 'sources';\n                stateDispatch({\n                  type: 'openNode',\n                  name: item.name,\n                  node: `${category}-${item.id}`,\n                });\n                dispatch(loadItemDetail(category, item.id));\n              }\n            }}\n          />\n        </CardBody>\n      </Card>\n    </DetailDrawer>\n  );\n};\n\nexport default TreeView;\n","import { getAxtionsInstace } from './api';\nimport { SOURCES_API_BASE } from '../constants/api-constants';\n\nexport const getSourcesTypes = (ids) =>\n  getAxtionsInstace()\n    .post(`${SOURCES_API_BASE}/graphql`, {\n      query: `{ sources( filter: { id: { eq: [${ids}] } } )\n        { id, source_type_id, name }\n    }`,\n    })\n    .then(({ data }) => data);\n\nexport const getSourceTypes = () => getAxtionsInstace().get(`${SOURCES_API_BASE}/source_types`);\n"],"sourceRoot":""}