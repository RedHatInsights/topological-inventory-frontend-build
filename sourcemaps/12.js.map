{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/extends.js","webpack:///./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack:///./src/components/view-switcher.js","webpack:///./src/pages/tree-view.js"],"names":["_extends","module","exports","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","arr","Array","isArray","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","TypeError","StyledLink","styled","Link","ViewSwitcher","props","pathname","useLocation","to","paths","treeView","isSelected","topologyView","TreeView","useState","treeData","setTreeData","dispatch","useDispatch","isLoaded","useSelector","sourcesReducer","sources","shallowEqual","sourceTypes","openedNodes","openedNode","selectedNode","useEffect","loadSourceTypes","loadSourcesAction","createTreeData","item","infoNode","structureNode","expandedNodes","map","children","forEach","child","name","nodeName","id","label","subItem","defaultExpanded","includes","attributes","transformLabel","originalId","isSelectable","category","activeItems","data","onSelect","e","clickOnNode","loadItemDetail"],"mappings":"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","file":"js/12.ffd041735b9c599cda91.js","sourcesContent":["function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","import React from 'react';\nimport { ToggleGroupItem, ToggleGroup } from '@patternfly/react-core';\nimport { Link, useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { paths } from '../routes';\n\nconst StyledLink = styled(Link)`\n  color: inherit;\n  text-decoration: none;\n`;\n\nconst ViewSwitcher = (props) => {\n  const { pathname } = useLocation();\n\n  return (\n    <ToggleGroup {...props}>\n      <StyledLink to={paths.treeView}>\n        <ToggleGroupItem isSelected={pathname === paths.treeView}>Tree view</ToggleGroupItem>\n      </StyledLink>\n      <StyledLink to={paths.topologyView}>\n        <ToggleGroupItem isSelected={pathname === paths.topologyView}>Topology view</ToggleGroupItem>\n      </StyledLink>\n    </ToggleGroup>\n  );\n};\n\nexport default ViewSwitcher;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\n\nimport { Card, CardBody, CardTitle } from '@patternfly/react-core';\n\nimport { structureNode } from '../api/topology-viewer-api';\n\nimport CardLoader from '../components/loaders/card-loader';\nimport { loadSourcesAction, loadSourceTypes, loadItemDetail, clickOnNode } from '../store/actions';\n\nimport { TreeView as PFTreeView } from '@patternfly/react-core';\nimport ViewSwitcher from '../components/view-switcher';\n\nconst createTreeData = (item, infoNode = structureNode, sourceTypes = [], expandedNodes = []) => {\n  if (Array.isArray(item)) {\n    return item.map((source) => createTreeData(source, infoNode, sourceTypes, expandedNodes));\n  }\n\n  const children = [];\n\n  infoNode.children?.forEach((child) => {\n    if (item[child.name]?.length > 0) {\n      const nodeName = `${item.id}-${child.name}`;\n\n      children.push({\n        name: child.label,\n        id: nodeName,\n        children: item[child.name]?.map((subItem) => createTreeData(subItem, child, sourceTypes, expandedNodes)),\n        defaultExpanded: expandedNodes.includes(nodeName),\n      });\n    }\n  });\n\n  let name = (infoNode.attributes && item[infoNode.attributes[0]]) || item.name || item.id;\n\n  if (infoNode.transformLabel) {\n    name = infoNode.transformLabel(item, sourceTypes);\n  }\n\n  const nodeName = `${infoNode.name}-${item.id}`;\n\n  return {\n    originalId: item.id,\n    id: nodeName,\n    key: item.id,\n    name,\n    ...(children.length > 0 ? { children } : {}),\n    isSelectable: true,\n    defaultExpanded: expandedNodes.includes(nodeName),\n    category: infoNode.name,\n  };\n};\n\nconst TreeView = () => {\n  const [treeData, setTreeData] = useState();\n\n  const dispatch = useDispatch();\n\n  const isLoaded = useSelector(({ sourcesReducer: { isLoaded } }) => isLoaded);\n  const sources = useSelector(({ sourcesReducer }) => sourcesReducer.sources, shallowEqual);\n  const sourceTypes = useSelector(({ sourcesReducer }) => sourcesReducer.sourceTypes, shallowEqual);\n  const openedNodes = useSelector(\n    ({ sourcesReducer }) => sourcesReducer.openedNodes,\n    () => true\n  );\n  const openedNode = useSelector(({ sourcesReducer }) => sourcesReducer.selectedNode);\n\n  useEffect(() => {\n    if (!isLoaded) {\n      dispatch(loadSourceTypes());\n      dispatch(loadSourcesAction());\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isLoaded) {\n      setTreeData(createTreeData(sources, structureNode, sourceTypes, openedNodes));\n    }\n  }, [isLoaded]);\n\n  if (!isLoaded || !treeData) {\n    return <CardLoader />;\n  }\n\n  return (\n    <Card>\n      <CardTitle>\n        <ViewSwitcher />\n      </CardTitle>\n      <CardBody>\n        Sources\n        <PFTreeView\n          {...(openedNode && { activeItems: [{ id: openedNode }] })}\n          data={treeData}\n          onSelect={(e, item) => {\n            dispatch(clickOnNode(item.id));\n\n            if (item.isSelectable) {\n              dispatch(loadItemDetail(item.id, item.name, item.category, item.originalId));\n            }\n          }}\n        />\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default TreeView;\n"],"sourceRoot":""}