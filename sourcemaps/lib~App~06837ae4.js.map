{"version":3,"sources":["webpack:///./src/store/reducers/sources-reducer.js","webpack:///./src/store/index.js","webpack:///./src/App.js","webpack:///./src/utilities/get-base-name.js","webpack:///./src/entry.js","webpack:///./src/api/api.js","webpack:///./src/constants/api-constants.js","webpack:///./src/components/detail-drawer/drawer-panel-content.js","webpack:///./src/components/detail-drawer/index.js","webpack:///./src/routes.js","webpack:///./src/components/loaders/card-loader.js","webpack:///./src/api/topology-viewer-api.js","webpack:///./src/store/actions.js","webpack:///./src/api/sources.js","webpack:///./src/store/action-types/sources-action-types.js"],"names":["registry","sourcesInitialState","isLoaded","sourceTypes","sources","details","isDetailLoading","detailOpen","detail","node","undefined","name","LOAD_DATA","state","payload","LOAD_SOURCE_TYPES","data","LOAD_DETAIL_FULFILLED","LOAD_DETAIL_FAILED","LOAD_DETAIL_PENDING","openDetail","CLOSE_DETAIL","OPEN_DETAIL","App","useEffect","insights","chrome","init","getBaseName","pathname","release","pathName","split","shift","ReactDOM","render","store","Error","middleware","ReducerRegistry","thunk","promiseMiddleware","register","sourcesReducer","applyReducerHash","getStore","basename","window","location","document","getElementById","axiosInstance","axios","create","interceptors","response","use","getAxtionsInstace","grapqlInstance","request","config","a","auth","getUser","errors","message","errorType","TOPOLOGICAL_INVETORY_API_BASE","SOURCES_API_BASE","PanelContent","isLoading","useSelector","id","dispatch","useDispatch","DrawerPanelContent","DrawerHead","DrawerActions","DrawerCloseButton","onClick","closeDetailDrawer","DrawerPanelBody","Bullseye","className","Spinner","src","DetailDrawer","children","open","Drawer","isExpanded","DrawerContent","panelContent","DrawerContentBody","propTypes","PropTypes","oneOfType","arrayOf","TopologyView","lazy","TreeView","Crossroads","paths","index","treeView","topologyView","StyledGrid","styled","Grid","Routes","hasGutter","GridItem","fallback","exact","path","component","StyledCard","Card","CardLoader","size","API","structureNode","topologyViewNode","nodeShape","nodeType","transformLabel","find","source_type_id","product_name","label","attributes","loadSourceQuery","createGraphQL","map","child","loadSources","post","query","then","loadSourcesAction","ids","additionalData","type","source","loadSourceTypes","get","LOAD_SOURCE_TYPES_FAILED","loadItemDetail","nodeName","getState","prefix"],"mappings":"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","file":"js/lib~App~06837ae4.62178c2fdf39a1e6e02c.js","sourcesContent":["import {\n  LOAD_DATA,\n  LOAD_SOURCE_TYPES,\n  LOAD_DETAIL_FULFILLED,\n  LOAD_DETAIL_FAILED,\n  LOAD_DETAIL_PENDING,\n  CLOSE_DETAIL,\n  OPEN_DETAIL,\n} from '../action-types/sources-action-types';\n\nexport const sourcesInitialState = {\n  isLoaded: false,\n  sourceTypes: [],\n  sources: [],\n  details: {},\n  isDetailLoading: false,\n  detailOpen: false,\n  detail: {\n    node: undefined,\n    name: undefined,\n  },\n};\n\nconst loadData = (state, { payload: { sources } }) => ({\n  ...state,\n  isLoaded: true,\n  sources,\n});\n\nconst loadSourceTypes = (state, { payload: { data } }) => ({\n  ...state,\n  sourceTypes: data,\n});\n\nconst loadDetailPending = (state) => ({\n  ...state,\n  isDetailLoading: true,\n  openDetail: true,\n});\n\nconst loadDetailFailed = (state) => ({\n  ...state,\n  isDetailLoading: false,\n});\n\nconst loadDetailFulfilled = (state, { payload }) => ({\n  ...state,\n  details: {\n    ...state.details,\n    ...payload,\n  },\n  isDetailLoading: false,\n});\n\nconst closeDetail = (state) => ({\n  ...state,\n  detailOpen: false,\n});\n\nconst openDetail = (state, { payload }) => ({\n  ...state,\n  detailOpen: true,\n  detail: {\n    node: payload.node,\n    name: payload.name,\n  },\n});\n\nexport default {\n  [LOAD_DATA]: loadData,\n  [LOAD_SOURCE_TYPES]: loadSourceTypes,\n  [LOAD_DETAIL_FULFILLED]: loadDetailFulfilled,\n  [LOAD_DETAIL_FAILED]: loadDetailFailed,\n  [LOAD_DETAIL_PENDING]: loadDetailPending,\n  [CLOSE_DETAIL]: closeDetail,\n  [OPEN_DETAIL]: openDetail,\n};\n","import ReducerRegistry, {\n  applyReducerHash,\n} from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport thunk from 'redux-thunk';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport sourcesReducer, { sourcesInitialState } from './reducers/sources-reducer';\n\nlet registry;\n\nexport const init = (...middleware) => {\n  if (registry) {\n    throw new Error('store already initialized');\n  }\n\n  registry = new ReducerRegistry({}, [thunk, promiseMiddleware, ...middleware]);\n\n  registry.register({\n    sourcesReducer: applyReducerHash(sourcesReducer, sourcesInitialState),\n  });\n  return registry;\n};\n\nexport const getStore = () => registry.getStore();\n\nexport const register = (...args) => registry.register(...args);\n","import React, { Fragment, useEffect } from 'react';\n\nimport Routes from './routes';\n\nconst App = () => {\n  useEffect(() => {\n    insights.chrome.init();\n    // insights.chrome.identifyApp('topological-inventory');\n  }, []);\n\n  return (\n    <Fragment>\n      <Routes />\n    </Fragment>\n  );\n};\n\nexport default App;\n","function getBaseName(pathname) {\n  let release = '/';\n  const pathName = pathname.split('/');\n\n  pathName.shift();\n\n  if (pathName[0] === 'beta') {\n    pathName.shift();\n    release = `/beta/`;\n  }\n\n  return `${release}${pathName[0]}/${pathName[1]}`;\n}\n\nexport default getBaseName;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport getBaseName from './utilities/get-base-name';\n\nReactDOM.render(\n  <Provider store={init().getStore()}>\n    <Router basename={getBaseName(window.location.pathname)}>\n      <App />\n    </Router>\n  </Provider>,\n\n  document.getElementById('root')\n);\n","import axios from 'axios';\n\nconst resolveInterceptor = (response) => response.data || response;\nconst axiosInstance = axios.create();\naxiosInstance.interceptors.response.use(resolveInterceptor);\n\nexport const getAxtionsInstace = () => axiosInstance;\n\n/**\n * graphql API\n */\n\nconst grapqlInstance = axios.create();\ngrapqlInstance.interceptors.request.use(async (config) => {\n  await window.insights.chrome.auth.getUser();\n  return config;\n});\n/**\n * Graphql does not return error response when the qery fails.\n * Instead it returns 200 response with error object.\n * We catch it and throw it to trigger notification middleware\n */\ngrapqlInstance.interceptors.response.use(({ data }) => {\n  if (data.errors) {\n    throw {\n      message: data.errors[0].errorType,\n      data: data.errors[0].message,\n    };\n  }\n\n  return data;\n});\n\nexport const getGraphqlInstance = () => grapqlInstance;\n","export const TOPOLOGICAL_INVETORY_API_BASE = `/api/topological-inventory/v3.0`;\nexport const SOURCES_API_BASE = `/api/sources/v3.0`;\n","import React from 'react';\nimport ReactJsonView from 'react-json-view';\nimport {\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerActions,\n  DrawerCloseButton,\n  Spinner,\n  Bullseye,\n  DrawerPanelBody,\n} from '@patternfly/react-core';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { closeDetailDrawer } from '../../store/actions';\n\nconst PanelContent = () => {\n  const isLoading = useSelector(({ sourcesReducer }) => sourcesReducer.isDetailLoading);\n  const id = useSelector(({ sourcesReducer }) => sourcesReducer.detail?.node);\n  const name = useSelector(({ sourcesReducer }) => sourcesReducer.detail?.name);\n  const data = useSelector(({ sourcesReducer }) => sourcesReducer.details?.[id]);\n\n  const dispatch = useDispatch();\n\n  return (\n    <DrawerPanelContent>\n      <DrawerHead>\n        {name} -- {id}\n        <DrawerActions>\n          <DrawerCloseButton onClick={() => dispatch(closeDetailDrawer())} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        {isLoading ? (\n          <Bullseye className=\"pf-u-p-xl\">\n            <Spinner />\n          </Bullseye>\n        ) : (\n          <ReactJsonView src={data} />\n        )}\n      </DrawerPanelBody>\n    </DrawerPanelContent>\n  );\n};\n\nexport default PanelContent;\n","import React from 'react';\nimport { Drawer, DrawerContent, DrawerContentBody } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport PanelContent from './drawer-panel-content';\n\nconst DetailDrawer = ({ children }) => {\n  const open = useSelector(({ sourcesReducer }) => sourcesReducer.detailOpen);\n\n  return (\n    <Drawer isExpanded={open}>\n      <DrawerContent panelContent={<PanelContent />}>\n        <DrawerContentBody>{children}</DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nDetailDrawer.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]),\n};\n\nexport default DetailDrawer;\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { Grid, GridItem } from '@patternfly/react-core';\n\nimport CardLoader from './components/loaders/card-loader';\nimport DetailDrawer from './components/detail-drawer';\n\nconst TopologyView = lazy(() => import('./pages/topology-view'));\nconst TreeView = lazy(() => import('./pages/tree-view'));\nconst Crossroads = lazy(() => import('./pages/crossroads'));\n\nexport const paths = {\n  index: '/',\n  treeView: '/tree-view',\n  topologyView: '/topology-viewer',\n};\n\nconst StyledGrid = styled(Grid)`\n  min-height: 100%;\n`;\n\nconst Routes = () => (\n  <StyledGrid hasGutter>\n    <GridItem>\n      <Suspense fallback={<CardLoader />}>\n        <DetailDrawer>\n          <Switch>\n            <Route exact path={paths.treeView} component={TreeView} />\n            <Route exact path={paths.topologyView} component={TopologyView} />\n            <Route path={Routes.index} component={Crossroads} />\n            <Route path=\"*\" component={Crossroads} />\n          </Switch>\n        </DetailDrawer>\n      </Suspense>\n    </GridItem>\n  </StyledGrid>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { Bullseye, Card, CardBody, Spinner } from '@patternfly/react-core';\nimport styled from 'styled-components';\n\nconst StyledCard = styled(Card)`\n  height: 100%;\n`;\n\nconst CardLoader = () => (\n  <StyledCard>\n    <CardBody>\n      <Bullseye>\n        <Spinner size=\"xl\" />\n      </Bullseye>\n    </CardBody>\n  </StyledCard>\n);\n\nexport default CardLoader;\n","import { getAxtionsInstace } from './api';\nimport { TOPOLOGICAL_INVETORY_API_BASE } from '../constants/api-constants';\n\nconst API = getAxtionsInstace();\n\nexport const structureNode = {\n  name: 'sources',\n  topologyViewNode: {\n    nodeShape: 'hexagon',\n    nodeType: 'source',\n  },\n  transformLabel: (node, sourceTypes) =>\n    `${node.name} (${sourceTypes?.find(({ id }) => id === node.source_type_id)?.product_name || node.source_type_id})`,\n  children: [\n    {\n      name: 'service_offerings',\n      label: 'Service offerings',\n      attributes: ['name'],\n      topologyViewNode: {\n        nodeShape: 'square',\n        nodeType: 'serviceOfferings',\n      },\n    },\n    {\n      name: 'service_plans',\n      label: 'Service plans',\n      attributes: ['name'],\n      topologyViewNode: {\n        nodeShape: 'square',\n        nodeType: 'servicePlans',\n      },\n    },\n    {\n      name: 'service_instances',\n      label: 'Service instances',\n      attributes: ['name'],\n      topologyViewNode: {\n        nodeShape: 'square',\n        nodeType: 'serviceInstances',\n      },\n    },\n    {\n      name: 'service_inventories',\n      label: 'Service inventories',\n      attributes: ['name'],\n      topologyViewNode: {\n        nodeShape: 'square',\n        nodeType: 'serviceInventories',\n      },\n    },\n    {\n      name: 'service_instance_nodes',\n      label: 'Service instance nodes',\n      attributes: ['name'],\n      topologyViewNode: {\n        nodeShape: 'square',\n        nodeType: 'serviceInstanceNodes',\n      },\n    },\n    {\n      name: 'service_offering_nodes',\n      label: 'Service offering nodes',\n      attributes: ['name'],\n      topologyViewNode: {\n        nodeShape: 'square',\n        nodeType: 'serviceOfferingsNode',\n      },\n    },\n    {\n      name: 'source_regions',\n      label: 'Source regions',\n      attributes: ['name'],\n      children: [\n        {\n          name: 'networks',\n          label: 'Networks',\n          attributes: ['name'],\n          children: [\n            {\n              name: 'subnets',\n              label: 'Subnets',\n              attributes: ['name'],\n            },\n          ],\n        },\n        {\n          name: 'vms',\n          label: 'Virtual machines',\n          attributes: ['name'],\n          children: [\n            {\n              name: 'network_adapters',\n              label: 'Network adapters',\n              attributes: ['mac_address'],\n              children: [\n                {\n                  name: 'ipaddresses',\n                  label: 'IP addresses',\n                  attributes: ['ipaddress'],\n                },\n              ],\n            },\n            {\n              name: 'security_groups',\n              label: 'Security groups',\n              attributes: ['name'],\n            },\n            {\n              name: 'volumes',\n              label: 'Volumes',\n              attributes: ['name'],\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nconst createGraphQL = (node) =>\n  `${node.name} {id,${node.attributes ? node.attributes : ''},${\n    node.children ? node.children.map((child) => createGraphQL(child)) : ''\n  }}`;\n\nconst loadSourceQuery = `{${createGraphQL(structureNode)}}`;\n\nexport const loadSources = () =>\n  API.post(`${TOPOLOGICAL_INVETORY_API_BASE}/graphql`, {\n    query: loadSourceQuery,\n  }).then(({ data }) => data);\n","import {\n  LOAD_DATA,\n  LOAD_SOURCE_TYPES,\n  LOAD_SOURCE_TYPES_FAILED,\n  LOAD_DETAIL_FULFILLED,\n  LOAD_DETAIL_FAILED,\n  LOAD_DETAIL_PENDING,\n  OPEN_DETAIL,\n  CLOSE_DETAIL,\n} from './action-types/sources-action-types';\n\nimport { loadSources } from '../api/topology-viewer-api';\nimport { getSourcesTypes, getSourceTypes } from '../api/sources';\nimport { getAxtionsInstace } from '../api/api';\nimport { TOPOLOGICAL_INVETORY_API_BASE } from '../constants/api-constants';\n\nexport const loadSourcesAction = () => async (dispatch) => {\n  const data = await loadSources();\n\n  const additionalData = await getSourcesTypes(data.sources.map(({ id }) => id));\n\n  return dispatch({\n    type: LOAD_DATA,\n    payload: {\n      sources: data.sources.map((source) => {\n        return {\n          ...additionalData.sources.find(({ id }) => id === source.id),\n          ...source,\n        };\n      }),\n    },\n  });\n};\n\nexport const loadSourceTypes = () => async (dispatch) => {\n  try {\n    const sourceTypes = await getSourceTypes();\n    return dispatch({\n      type: LOAD_SOURCE_TYPES,\n      payload: sourceTypes,\n    });\n  } catch {\n    return dispatch({\n      type: LOAD_SOURCE_TYPES_FAILED,\n    });\n  }\n};\n\nexport const loadItemDetail = (name, id, nodeName) => async (dispatch, getState) => {\n  dispatch({\n    type: OPEN_DETAIL,\n    payload: { node: `${name}-${id}`, name: nodeName },\n  });\n\n  const {\n    sourcesReducer: { details },\n  } = getState();\n\n  if (details[`${name}-${id}`]) {\n    return dispatch({\n      type: LOAD_DETAIL_FULFILLED,\n    });\n  }\n\n  dispatch({\n    type: LOAD_DETAIL_PENDING,\n  });\n\n  try {\n    const detail = await getAxtionsInstace().get(`${TOPOLOGICAL_INVETORY_API_BASE}/${name}/${id}`);\n    return dispatch({\n      type: LOAD_DETAIL_FULFILLED,\n      payload: {\n        [`${name}-${id}`]: detail,\n      },\n    });\n  } catch {\n    return dispatch({\n      type: LOAD_DETAIL_FAILED,\n    });\n  }\n};\n\nexport const closeDetailDrawer = () => ({\n  type: CLOSE_DETAIL,\n});\n","import { getAxtionsInstace } from './api';\nimport { SOURCES_API_BASE } from '../constants/api-constants';\n\nexport const getSourcesTypes = (ids) =>\n  getAxtionsInstace()\n    .post(`${SOURCES_API_BASE}/graphql`, {\n      query: `{ sources( filter: { id: { eq: [${ids}] } } )\n        { id, source_type_id, name }\n    }`,\n    })\n    .then(({ data }) => data);\n\nexport const getSourceTypes = () => getAxtionsInstace().get(`${SOURCES_API_BASE}/source_types`);\n","const prefix = '@@topological_inventory_frontend/';\n\nexport const LOAD_DATA = `${prefix}LOAD_DATA`;\n\nexport const LOAD_SOURCE_TYPES = `${prefix}LOAD_SOURCE_TYPES`;\nexport const LOAD_SOURCE_TYPES_FAILED = `${prefix}LOAD_SOURCE_TYPES_FAILED`;\n\nexport const LOAD_DETAIL_PENDING = `${prefix}LOAD_DETAIL_PENDING`;\nexport const LOAD_DETAIL_FULFILLED = `${prefix}LOAD_DETAIL_FULFILLED`;\nexport const LOAD_DETAIL_FAILED = `${prefix}LOAD_DETAIL_FAILED`;\n\nexport const CLOSE_DETAIL = `${prefix}CLOSE_DETAIL`;\nexport const OPEN_DETAIL = `${prefix}OPEN_DETAIL`;\n"],"sourceRoot":""}