{"version":3,"sources":["webpack:///./src/components/tree/node.js","webpack:///./src/components/tree/index.js","webpack:///./src/api/amazon.js","webpack:///./src/pages/tree-view.js"],"names":["NodeWrapper","styled","level","props","DefaultRenderComponent","title","React","createElement","propTypes","PropTypes","node","isRequired","number","Node","children","render","useState","open","setOpen","length","Button","variant","onClick","style","marginLeft","map","key","id","_","nodeShape","string","arrayOf","shape","func","defaultProps","Tree","data","getVms","getAxtionsInstace","get","TOPOLOGICAL_INVETORY_API_BASE","getSecurityGroups","getTags","getNetworkAdapters","createTreeData","sources","source","createNodeData","type","copy","subCollections","forEach","collection","child","name","Object","keys","entityType","nodeData","TreeView","loading","setLoading","setData","dispatch","useDispatch","structure","useSelector","sourcesReducer","useEffect","Promise","all","getSources","getSourceTypes","then","a","sourceTypes","Array","isArray","getSourcesTypes","sourcesTypes","modifiedData","d","source_type_id","find","source_type_name","SET_DATA","payload","promises","typeName","getServiceOfferings","UPDATE_NODE","getServicePlans","getServiceInstance","getServiceInventories","getServiceInstanceNodes","getServiceOfferingNodes","promisesMapper","restOfData","treeData","Card","CardTitle","Breadcrumb","BreadcrumbItem","to","paths","index","isActive","CardBody"],"mappings":"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","file":"js/9.a6d814cfcf2d62040d53.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport { Button } from '@patternfly/react-core';\n\nimport AngleRightIcon from '@patternfly/react-icons/dist/js/icons/angle-right-icon';\nimport AngleDownIcon from '@patternfly/react-icons/dist/js/icons/angle-down-icon';\n\nconst NodeWrapper = styled(({ level, ...props }) => <div {...props} />)`\n  padding-left: ${({ level }) => (level > 0 ? 24 : 0)}px;\n`;\n\nconst DefaultRenderComponent = ({ title, level }) =>\n  React.createElement(`h${level + 1 <= 6 ? level + 1 : 6}`, {}, title);\n\nDefaultRenderComponent.propTypes = {\n  title: PropTypes.node.isRequired,\n  level: PropTypes.number,\n};\n\nconst Node = ({ title, level, children, render, ...node }) => {\n  const [open, setOpen] = useState(true);\n\n  return (\n    <NodeWrapper level={level}>\n      <div>\n        {children.length > 0 && !open && (\n          <Button variant=\"plain\" onClick={() => setOpen(true)}>\n            <AngleRightIcon />\n          </Button>\n        )}\n        {children.length > 0 && open && (\n          <Button variant=\"plain\" onClick={() => setOpen(false)}>\n            <AngleDownIcon />\n          </Button>\n        )}\n        {children.length === 0 && <span style={{ marginLeft: 46 }} />}\n        {render({ title, level, ...node })}\n      </div>\n      {open && children.map((node) => <Node level={level + 1} key={node.id} _ {...node} render={render} />)}\n    </NodeWrapper>\n  );\n};\n\nconst nodeShape = {\n  title: PropTypes.node.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nnodeShape.children = PropTypes.arrayOf(PropTypes.shape(nodeShape));\n\nNode.propTypes = {\n  title: PropTypes.node.isRequired,\n  children: PropTypes.arrayOf(PropTypes.shape(nodeShape)),\n  level: PropTypes.number,\n  render: PropTypes.func,\n};\n\nNode.defaultProps = {\n  children: [],\n  level: 0,\n  render: DefaultRenderComponent,\n};\n\nexport default Node;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Node from './node';\n\nconst Tree = ({ data, render }) => {\n  return (\n    <div>\n      <h1>Sources</h1>\n      {data.map((node) => (\n        <Node key={node.id} {...node} render={render} />\n      ))}\n    </div>\n  );\n};\n\nconst nodeShape = {\n  title: PropTypes.node.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nnodeShape.children = PropTypes.arrayOf(PropTypes.shape(nodeShape));\n\nTree.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape(nodeShape)),\n  render: PropTypes.func,\n};\n\nTree.defaultProps = {\n  data: [],\n};\n\nexport default Tree;\n","import { getAxtionsInstace } from './api';\nimport { TOPOLOGICAL_INVETORY_API_BASE } from '../constants/api-constants';\n\n// level 1\n\nexport const getVms = (id) => getAxtionsInstace().get(`${TOPOLOGICAL_INVETORY_API_BASE}/sources/${id}/vms?limit=4`);\n\n// level 2 vms / id / type\n\nexport const getSecurityGroups = (id) =>\n  getAxtionsInstace().get(`${TOPOLOGICAL_INVETORY_API_BASE}/vms/${id}/security_groups`);\nexport const getTags = (id) => getAxtionsInstace().get(`${TOPOLOGICAL_INVETORY_API_BASE}/vms/${id}/tags`);\nexport const getNetworkAdapters = (id) =>\n  getAxtionsInstace().get(`${TOPOLOGICAL_INVETORY_API_BASE}/vms/${id}/network_adapters`);\nexport const getPrivateIpAddresses = (id) =>\n  getAxtionsInstace().get(`${TOPOLOGICAL_INVETORY_API_BASE}/vms/${id}/private_ipaddresses`);\nexport const getPublicIpAddresses = (id) =>\n  getAxtionsInstace().get(`${TOPOLOGICAL_INVETORY_API_BASE}/vms/${id}/public_ipaddresses`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Tree from '../components/tree';\nimport {\n  getSources,\n  getServiceOfferingNodes,\n  getServiceInstanceNodes,\n  getServiceInventories,\n  getServiceInstance,\n  getServicePlans,\n  getServiceOfferings,\n} from '../api/ansible-tower';\nimport { UPDATE_NODE, SET_DATA } from '../store/action-types/sources-action-types';\nimport { Link } from 'react-router-dom';\nimport { Card, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport CardLoader from '../components/loaders/card-loader';\nimport { paths } from '../routes';\nimport DetailDrawer from '../components/detail-drawer';\nimport { getSourcesTypes, getSourceTypes } from '../api/sources';\nimport {\n  getVms,\n  getSecurityGroups,\n  getTags,\n  getNetworkAdapters,\n  // getPrivateIpAddresses,\n  // getPublicIpAddresses,\n} from '../api/amazon';\n\nconst promisesMapper = (id, typeName, dispatch) => {\n  switch (typeName) {\n    case 'ansible-tower':\n      return [\n        getServiceOfferings(id).then((data) =>\n          dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-offerings', data } })\n        ),\n        getServicePlans(id).then((data) =>\n          dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-plans', data } })\n        ),\n        getServiceInstance(id).then((data) =>\n          dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-instances', data } })\n        ),\n        getServiceInventories(id).then((data) =>\n          dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-inventories', data } })\n        ),\n        getServiceInstanceNodes(id).then((data) =>\n          dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-instance-nodes', data } })\n        ),\n        getServiceOfferingNodes(id).then((data) =>\n          dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-offering-nodes', data } })\n        ),\n      ];\n    case 'amazon':\n      return [\n        getVms(id)\n          .then((data) => {\n            dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'vms', data } });\n\n            return data.data;\n          })\n          .then((data) => {\n            const promises = data.map(({ id }) => {\n              const subCollections = [\n                getSecurityGroups(id).then((data) =>\n                  dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'security-groups', data } })\n                ),\n                getTags(id).then((data) => dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'tags', data } })),\n                getNetworkAdapters(id).then((data) =>\n                  dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'network-adapters', data } })\n                ),\n                /*getPrivateIpAddresses(id).then((data) =>\n                  dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'private-ip-addresses', data } })\n                ),\n                getPublicIpAddresses(id).then((data) =>\n                  dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'public-ip-addresses', data } })\n                ),*/\n              ];\n\n              return Promise.all(subCollections);\n            });\n\n            return Promise.all(promises);\n          }),\n      ];\n    default:\n      return [];\n  }\n};\n\nfunction createNodeData(node, type) {\n  if (!node) {\n    return;\n  }\n\n  const copy = {};\n  if (node.subCollections) {\n    node.subCollections.forEach((collection) => {\n      copy.children = [\n        ...(copy.children || []),\n        {\n          id: `sub-collection-${collection.type}`,\n          title: collection.type,\n          children: collection.data.data.map((child) => createNodeData(child, collection.type)),\n        },\n      ];\n    });\n  }\n\n  return {\n    ...copy,\n    id: node.id,\n    title: node.name || node.id || node[Object.keys(node)[0]],\n    ...(type && { type }),\n    ...(node.entityType && { type: node.entityType }),\n    nodeData: node,\n  };\n}\n\nfunction createTreeData(sources) {\n  if (!sources?.data) {\n    return;\n  }\n\n  return sources.data.map((source) => createNodeData(source));\n}\n\nconst TreeView = () => {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState({});\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n  const structure = useSelector(({ sourcesReducer }) => sourcesReducer);\n\n  useEffect(() => {\n    if (!structure?.data || structure?.data?.length === 0) {\n      setLoading(true);\n      Promise.all([getSources(), getSourceTypes()])\n        .then(async ([sources, sourceTypes]) => {\n          const data = Array.isArray(sources.data) ? sources.data : [sources];\n\n          const sourcesTypes = await getSourcesTypes(data.map(({ id }) => id));\n\n          const modifiedData = data.map((d) => ({\n            ...d,\n            entityType: 'sources',\n            source_type_id: sourcesTypes.data.sources.find(({ id }) => id === d.id)?.source_type_id,\n            source_type_name: sourceTypes.data.find(\n              ({ id }) => id === sourcesTypes.data.sources.find(({ id }) => id === d.id)?.source_type_id\n            )?.name,\n          }));\n\n          dispatch({\n            type: SET_DATA,\n            payload: {\n              ...data,\n              data: modifiedData,\n            },\n          });\n\n          return modifiedData;\n        })\n        .then((sources) => {\n          const promises = sources.map(({ id, source_type_name }) => {\n            const subCollections = promisesMapper(id, source_type_name, dispatch);\n\n            return Promise.all(subCollections).then(() => setLoading(false));\n          });\n          return Promise.all(promises);\n        });\n    }\n  }, []);\n\n  if (loading) {\n    return <CardLoader />;\n  }\n\n  const { entityType, subCollections, ...restOfData } = data;\n\n  const treeData = createTreeData(structure);\n  return (\n    <DetailDrawer open={open} data={restOfData} setOpen={setOpen}>\n      <Card>\n        <CardTitle>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={paths.index}>Topology Inventory</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>Tree view</BreadcrumbItem>\n          </Breadcrumb>\n        </CardTitle>\n        <CardBody>\n          <Tree\n            data={treeData}\n            render={({ title, type, nodeData }) =>\n              type ? (\n                <a\n                  onClick={() => {\n                    setData({ type, entityType, ...nodeData });\n                    setOpen(true);\n                  }}\n                >\n                  {title}\n                </a>\n              ) : (\n                <span>{title}</span>\n              )\n            }\n          />\n        </CardBody>\n      </Card>\n    </DetailDrawer>\n  );\n};\n\nexport default TreeView;\n"],"sourceRoot":""}