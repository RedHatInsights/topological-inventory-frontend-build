{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/extends.js","webpack:///./src/components/tree/node.js","webpack:///./src/components/tree/index.js","webpack:///./src/pages/tree-view.js"],"names":["_extends","module","exports","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","NodeWrapper","styled","level","props","DefaultRenderComponent","title","React","createElement","propTypes","PropTypes","node","isRequired","number","Node","children","render","map","id","_","nodeShape","string","arrayOf","shape","func","defaultProps","Tree","data","createTreeData","sources","createNodeData","type","copy","subCollections","forEach","collection","child","name","entityType","nodeData","TreeView","useState","loading","setLoading","dispatch","useDispatch","structure","useSelector","sourcesReducer","useEffect","getSources","then","SET_DATA","payload","d","promises","getServiceOfferings","UPDATE_NODE","getServicePlans","getServiceInstance","getServiceInventories","getServiceInstanceNodes","getServiceOfferingNodes","Promise","all","treeData","Card","CardTitle","Breadcrumb","BreadcrumbItem","to","paths","index","isActive","CardBody","pathname","search"],"mappings":"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","file":"js/9.0793b6a4876d9cf3f73e.js","sourcesContent":["function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst NodeWrapper = styled(({ level, ...props }) => <div {...props} />)`\n  padding-left: ${({ level }) => (level > 0 ? 24 : 0)}px;\n`;\n\nconst DefaultRenderComponent = ({ title, level }) =>\n  React.createElement(`h${level + 1 <= 6 ? level + 1 : 6}`, {}, title);\n\nDefaultRenderComponent.propTypes = {\n  title: PropTypes.node.isRequired,\n  level: PropTypes.number,\n};\n\nconst Node = ({ title, level, children, render, ...node }) => {\n  return (\n    <NodeWrapper level={level}>\n      {render({ title, level, ...node })}\n      {children.map((node) => (\n        <Node level={level + 1} key={node.id} _ {...node} render={render} />\n      ))}\n    </NodeWrapper>\n  );\n};\n\nconst nodeShape = {\n  title: PropTypes.node.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nnodeShape.children = PropTypes.arrayOf(PropTypes.shape(nodeShape));\n\nNode.propTypes = {\n  title: PropTypes.node.isRequired,\n  children: PropTypes.arrayOf(PropTypes.shape(nodeShape)),\n  level: PropTypes.number,\n  render: PropTypes.func,\n};\n\nNode.defaultProps = {\n  children: [],\n  level: 0,\n  render: DefaultRenderComponent,\n};\n\nexport default Node;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Node from './node';\n\nconst Tree = ({ data, render }) => {\n  return (\n    <div>\n      <h1>Tree component</h1>\n      {data.map((node) => (\n        <Node key={node.id} {...node} render={render} />\n      ))}\n    </div>\n  );\n};\n\nconst nodeShape = {\n  title: PropTypes.node.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nnodeShape.children = PropTypes.arrayOf(PropTypes.shape(nodeShape));\n\nTree.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape(nodeShape)),\n  render: PropTypes.func,\n};\n\nTree.defaultProps = {\n  data: [],\n};\n\nexport default Tree;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Tree from '../components/tree';\nimport {\n  getSources,\n  getServiceOfferingNodes,\n  getServiceInstanceNodes,\n  getServiceInventories,\n  getServiceInstance,\n  getServicePlans,\n  getServiceOfferings,\n} from '../api/ansible-tower';\nimport { UPDATE_NODE, SET_DATA } from '../store/action-types/sources-action-types';\nimport { Link } from 'react-router-dom';\nimport { Card, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport CardLoader from '../components/loaders/card-loader';\nimport { paths } from '../routes';\n\nfunction createNodeData(node, type) {\n  if (!node) {\n    return;\n  }\n\n  const copy = {};\n  if (node.subCollections) {\n    node.subCollections.forEach((collection) => {\n      copy.children = [\n        ...(copy.children || []),\n        {\n          id: `sub-collection-${collection.type}`,\n          title: collection.type,\n          children: collection.data.data.map((child) => createNodeData(child, collection.type)),\n        },\n      ];\n    });\n  }\n\n  return {\n    ...copy,\n    id: node.id,\n    title: node.name || node.id,\n    ...(type && { type }),\n    ...(node.entityType && { type: node.entityType }),\n    nodeData: node,\n  };\n}\n\nfunction createTreeData(sources) {\n  if (!sources?.data) {\n    return;\n  }\n\n  return sources.data.map((source) => createNodeData(source));\n}\n\nconst TreeView = () => {\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const structure = useSelector(({ sourcesReducer }) => sourcesReducer);\n\n  useEffect(() => {\n    if (!structure?.data || structure?.data?.length === 0) {\n      setLoading(true);\n      getSources()\n        .then((data) => {\n          dispatch({\n            type: SET_DATA,\n            payload: { ...data, data: data.data.map((d) => ({ ...d, entityType: 'sources' })) },\n          });\n          return data.data;\n        })\n        .then((sources) => {\n          const promises = sources.map(({ id }) => {\n            const subCollections = [\n              getServiceOfferings(id).then((data) =>\n                dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-offerings', data } })\n              ),\n              getServicePlans(id).then((data) =>\n                dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-plans', data } })\n              ),\n              getServiceInstance(id).then((data) =>\n                dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-instances', data } })\n              ),\n              getServiceInventories(id).then((data) =>\n                dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-inventories', data } })\n              ),\n              getServiceInstanceNodes(id).then((data) =>\n                dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-instance-nodes', data } })\n              ),\n              getServiceOfferingNodes(id).then((data) =>\n                dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-offering-nodes', data } })\n              ),\n            ];\n            return Promise.all(subCollections).then(() => setLoading(false));\n          });\n          return Promise.all(promises);\n        });\n    }\n  }, []);\n  if (loading) {\n    return <CardLoader />;\n  }\n\n  const treeData = createTreeData(structure);\n  return (\n    <Card>\n      <CardTitle>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={paths.index}>Topology Inventory</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>Tree view</BreadcrumbItem>\n        </Breadcrumb>\n      </CardTitle>\n      <CardBody>\n        <Tree\n          data={treeData}\n          render={({ title, id, type }) =>\n            type ? (\n              <Link\n                to={{\n                  pathname: '/entity',\n                  search: `?id=${id}&type=${type}`,\n                }}\n              >\n                {title}\n              </Link>\n            ) : (\n              <div>{title}</div>\n            )\n          }\n        />\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default TreeView;\n"],"sourceRoot":""}