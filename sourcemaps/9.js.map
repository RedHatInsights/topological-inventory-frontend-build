{"version":3,"sources":["webpack:///./src/components/tree/node.js","webpack:///./src/components/tree/index.js","webpack:///./src/api/amazon.js","webpack:///./src/pages/tree-view.js"],"names":["NodeWrapper","styled","level","props","DefaultRenderComponent","title","React","createElement","propTypes","PropTypes","node","isRequired","number","Node","children","render","useState","open","setOpen","length","Button","variant","onClick","map","key","id","_","nodeShape","string","arrayOf","shape","func","defaultProps","Tree","data","getVms","getAxtionsInstace","get","TOPOLOGICAL_INVETORY_API_BASE","getSecurityGroups","getTags","getNetworkAdapters","getPrivateIpAddresses","getPublicIpAddresses","createTreeData","sources","source","createNodeData","type","copy","subCollections","forEach","collection","child","name","entityType","nodeData","TreeView","loading","setLoading","setData","dispatch","useDispatch","structure","useSelector","sourcesReducer","useEffect","Promise","all","getSources","getSourceTypes","then","a","sourceTypes","getSourcesTypes","sourcesTypes","modifiedData","d","source_type_id","find","source_type_name","SET_DATA","payload","promises","typeName","getServiceOfferings","UPDATE_NODE","getServicePlans","getServiceInstance","getServiceInventories","getServiceInstanceNodes","getServiceOfferingNodes","promisesMapper","restOfData","treeData","Card","CardTitle","Breadcrumb","BreadcrumbItem","to","paths","index","isActive","CardBody"],"mappings":"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","file":"js/9.c100f855626bca4779f7.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport { Button } from '@patternfly/react-core';\n\nimport AngleRightIcon from '@patternfly/react-icons/dist/js/icons/angle-right-icon';\nimport AngleDownIcon from '@patternfly/react-icons/dist/js/icons/angle-down-icon';\n\nconst NodeWrapper = styled(({ level, ...props }) => <div {...props} />)`\n  padding-left: ${({ level }) => (level > 0 ? 24 : 0)}px;\n`;\n\nconst DefaultRenderComponent = ({ title, level }) =>\n  React.createElement(`h${level + 1 <= 6 ? level + 1 : 6}`, {}, title);\n\nDefaultRenderComponent.propTypes = {\n  title: PropTypes.node.isRequired,\n  level: PropTypes.number,\n};\n\nconst Node = ({ title, level, children, render, ...node }) => {\n  const [open, setOpen] = useState(true);\n\n  return (\n    <NodeWrapper level={level}>\n      <div>\n        {children.length > 0 && !open && (\n          <Button variant=\"plain\" onClick={() => setOpen(true)}>\n            <AngleRightIcon />\n          </Button>\n        )}\n        {children.length > 0 && open && (\n          <Button variant=\"plain\" onClick={() => setOpen(false)}>\n            <AngleDownIcon />\n          </Button>\n        )}\n        {render({ title, level, ...node })}\n      </div>\n      {open && children.map((node) => <Node level={level + 1} key={node.id} _ {...node} render={render} />)}\n    </NodeWrapper>\n  );\n};\n\nconst nodeShape = {\n  title: PropTypes.node.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nnodeShape.children = PropTypes.arrayOf(PropTypes.shape(nodeShape));\n\nNode.propTypes = {\n  title: PropTypes.node.isRequired,\n  children: PropTypes.arrayOf(PropTypes.shape(nodeShape)),\n  level: PropTypes.number,\n  render: PropTypes.func,\n};\n\nNode.defaultProps = {\n  children: [],\n  level: 0,\n  render: DefaultRenderComponent,\n};\n\nexport default Node;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Node from './node';\n\nconst Tree = ({ data, render }) => {\n  return (\n    <div>\n      <h1>Sources</h1>\n      {data.map((node) => (\n        <Node key={node.id} {...node} render={render} />\n      ))}\n    </div>\n  );\n};\n\nconst nodeShape = {\n  title: PropTypes.node.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nnodeShape.children = PropTypes.arrayOf(PropTypes.shape(nodeShape));\n\nTree.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape(nodeShape)),\n  render: PropTypes.func,\n};\n\nTree.defaultProps = {\n  data: [],\n};\n\nexport default Tree;\n","import { getAxtionsInstace } from './api';\nimport { TOPOLOGICAL_INVETORY_API_BASE } from '../constants/api-constants';\n\n// level 1\n\nexport const getVms = (id) => getAxtionsInstace().get(`${TOPOLOGICAL_INVETORY_API_BASE}/sources/${id}/vms`);\n\n// level 2 vms / id / type\n\nexport const getSecurityGroups = (id) =>\n  getAxtionsInstace().get(`${TOPOLOGICAL_INVETORY_API_BASE}/vms/${id}/security_groups`);\nexport const getTags = (id) => getAxtionsInstace().get(`${TOPOLOGICAL_INVETORY_API_BASE}/vms/${id}/tags`);\nexport const getNetworkAdapters = (id) =>\n  getAxtionsInstace().get(`${TOPOLOGICAL_INVETORY_API_BASE}/vms/${id}/network_adapters`);\nexport const getPrivateIpAddresses = (id) =>\n  getAxtionsInstace().get(`${TOPOLOGICAL_INVETORY_API_BASE}/vms/${id}/private_ipaddresses`);\nexport const getPublicIpAddresses = (id) =>\n  getAxtionsInstace().get(`${TOPOLOGICAL_INVETORY_API_BASE}/vms/${id}/public_ipaddresses`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Tree from '../components/tree';\nimport {\n  getSources,\n  getServiceOfferingNodes,\n  getServiceInstanceNodes,\n  getServiceInventories,\n  getServiceInstance,\n  getServicePlans,\n  getServiceOfferings,\n} from '../api/ansible-tower';\nimport { UPDATE_NODE, SET_DATA } from '../store/action-types/sources-action-types';\nimport { Link } from 'react-router-dom';\nimport { Card, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport CardLoader from '../components/loaders/card-loader';\nimport { paths } from '../routes';\nimport DetailDrawer from '../components/detail-drawer';\nimport { getSourcesTypes, getSourceTypes } from '../api/sources';\nimport {\n  getVms,\n  getSecurityGroups,\n  getTags,\n  getNetworkAdapters,\n  getPrivateIpAddresses,\n  getPublicIpAddresses,\n} from '../api/amazon';\n\nconst promisesMapper = (id, typeName, dispatch) => {\n  switch (typeName) {\n    case 'ansible-tower':\n      return [\n        getServiceOfferings(id).then((data) =>\n          dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-offerings', data } })\n        ),\n        getServicePlans(id).then((data) =>\n          dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-plans', data } })\n        ),\n        getServiceInstance(id).then((data) =>\n          dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-instances', data } })\n        ),\n        getServiceInventories(id).then((data) =>\n          dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-inventories', data } })\n        ),\n        getServiceInstanceNodes(id).then((data) =>\n          dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-instance-nodes', data } })\n        ),\n        getServiceOfferingNodes(id).then((data) =>\n          dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-offering-nodes', data } })\n        ),\n      ];\n    case 'amazon':\n      return [\n        getVms(id)\n          .then((data) => {\n            dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'vms', data } });\n\n            return data.data;\n          })\n          .then((data) => {\n            const promises = data.map(({ id }) => {\n              const subCollections = [\n                getSecurityGroups(id).then((data) =>\n                  dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'security-groups', data } })\n                ),\n                getTags(id).then((data) => dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'tags', data } })),\n                getNetworkAdapters(id).then((data) =>\n                  dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'network-adapters', data } })\n                ),\n                getPrivateIpAddresses(id).then((data) =>\n                  dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'private-ip-addresses', data } })\n                ),\n                getPublicIpAddresses(id).then((data) =>\n                  dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'public-ip-addresses', data } })\n                ),\n              ];\n\n              return Promise.all(subCollections);\n            });\n\n            return Promise.all(promises);\n          }),\n      ];\n    default:\n      return [];\n  }\n};\n\nfunction createNodeData(node, type) {\n  if (!node) {\n    return;\n  }\n\n  const copy = {};\n  if (node.subCollections) {\n    node.subCollections.forEach((collection) => {\n      copy.children = [\n        ...(copy.children || []),\n        {\n          id: `sub-collection-${collection.type}`,\n          title: collection.type,\n          children: collection.data.data.map((child) => createNodeData(child, collection.type)),\n        },\n      ];\n    });\n  }\n\n  return {\n    ...copy,\n    id: node.id,\n    title: node.name || node.id,\n    ...(type && { type }),\n    ...(node.entityType && { type: node.entityType }),\n    nodeData: node,\n  };\n}\n\nfunction createTreeData(sources) {\n  if (!sources?.data) {\n    return;\n  }\n\n  return sources.data.map((source) => createNodeData(source));\n}\n\nconst TreeView = () => {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState({});\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n  const structure = useSelector(({ sourcesReducer }) => sourcesReducer);\n\n  useEffect(() => {\n    if (!structure?.data || structure?.data?.length === 0) {\n      setLoading(true);\n      Promise.all([getSources(), getSourceTypes()])\n        .then(async ([data, sourceTypes]) => {\n          const sourcesTypes = await getSourcesTypes(data.data.map(({ id }) => id));\n\n          const modifiedData = data.data.map((d) => ({\n            ...d,\n            entityType: 'sources',\n            source_type_id: sourcesTypes.data.sources.find(({ id }) => id === d.id).source_type_id,\n            source_type_name: sourceTypes.data.find(\n              ({ id }) => id === sourcesTypes.data.sources.find(({ id }) => id === d.id).source_type_id\n            ).name,\n          }));\n\n          dispatch({\n            type: SET_DATA,\n            payload: {\n              ...data,\n              data: modifiedData,\n            },\n          });\n\n          return modifiedData;\n        })\n        .then((sources) => {\n          const promises = sources.map(({ id, source_type_name }) => {\n            const subCollections = promisesMapper(id, source_type_name, dispatch);\n\n            return Promise.all(subCollections).then(() => setLoading(false));\n          });\n          return Promise.all(promises);\n        });\n    }\n  }, []);\n  if (loading) {\n    return <CardLoader />;\n  }\n\n  const { entityType, subCollections, ...restOfData } = data;\n\n  const treeData = createTreeData(structure);\n  return (\n    <DetailDrawer open={open} data={restOfData} setOpen={setOpen}>\n      <Card>\n        <CardTitle>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={paths.index}>Topology Inventory</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>Tree view</BreadcrumbItem>\n          </Breadcrumb>\n        </CardTitle>\n        <CardBody>\n          <Tree\n            data={treeData}\n            render={({ title, type, nodeData }) =>\n              type ? (\n                <a\n                  onClick={() => {\n                    setData({ type, entityType, ...nodeData });\n                    setOpen(true);\n                  }}\n                >\n                  {title}\n                </a>\n              ) : (\n                <span>{title}</span>\n              )\n            }\n          />\n        </CardBody>\n      </Card>\n    </DetailDrawer>\n  );\n};\n\nexport default TreeView;\n"],"sourceRoot":""}