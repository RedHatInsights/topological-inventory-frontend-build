{"version":3,"sources":["webpack:///./src/components/tree/node.js","webpack:///./src/components/tree/index.js","webpack:///./src/pages/tree-view.js"],"names":["NodeWrapper","styled","level","props","DefaultRenderComponent","title","React","createElement","propTypes","PropTypes","node","isRequired","number","Node","children","render","useState","open","setOpen","length","Button","variant","onClick","map","key","id","_","nodeShape","string","arrayOf","shape","func","defaultProps","Tree","data","createTreeData","sources","source","createNodeData","type","copy","subCollections","forEach","collection","child","name","entityType","nodeData","TreeView","loading","setLoading","setData","dispatch","useDispatch","structure","useSelector","sourcesReducer","useEffect","getSources","then","SET_DATA","payload","d","promises","getServiceOfferings","UPDATE_NODE","getServicePlans","getServiceInstance","getServiceInventories","getServiceInstanceNodes","getServiceOfferingNodes","Promise","all","treeData","Card","CardTitle","Breadcrumb","BreadcrumbItem","to","paths","index","isActive","CardBody"],"mappings":"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","file":"js/9.7f76f68c73fa0a2de470.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport { Button } from '@patternfly/react-core';\n\nimport AngleRightIcon from '@patternfly/react-icons/dist/js/icons/angle-right-icon';\nimport AngleDownIcon from '@patternfly/react-icons/dist/js/icons/angle-down-icon';\n\nconst NodeWrapper = styled(({ level, ...props }) => <div {...props} />)`\n  padding-left: ${({ level }) => (level > 0 ? 24 : 0)}px;\n`;\n\nconst DefaultRenderComponent = ({ title, level }) =>\n  React.createElement(`h${level + 1 <= 6 ? level + 1 : 6}`, {}, title);\n\nDefaultRenderComponent.propTypes = {\n  title: PropTypes.node.isRequired,\n  level: PropTypes.number,\n};\n\nconst Node = ({ title, level, children, render, ...node }) => {\n  const [open, setOpen] = useState(true);\n\n  return (\n    <NodeWrapper level={level}>\n      <div>\n        {children.length > 0 && !open && (\n          <Button variant=\"plain\" onClick={() => setOpen(true)}>\n            <AngleRightIcon />\n          </Button>\n        )}\n        {children.length > 0 && open && (\n          <Button variant=\"plain\" onClick={() => setOpen(false)}>\n            <AngleDownIcon />\n          </Button>\n        )}\n        {render({ title, level, ...node })}\n      </div>\n      {open && children.map((node) => <Node level={level + 1} key={node.id} _ {...node} render={render} />)}\n    </NodeWrapper>\n  );\n};\n\nconst nodeShape = {\n  title: PropTypes.node.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nnodeShape.children = PropTypes.arrayOf(PropTypes.shape(nodeShape));\n\nNode.propTypes = {\n  title: PropTypes.node.isRequired,\n  children: PropTypes.arrayOf(PropTypes.shape(nodeShape)),\n  level: PropTypes.number,\n  render: PropTypes.func,\n};\n\nNode.defaultProps = {\n  children: [],\n  level: 0,\n  render: DefaultRenderComponent,\n};\n\nexport default Node;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Node from './node';\n\nconst Tree = ({ data, render }) => {\n  return (\n    <div>\n      <h1>Sources</h1>\n      {data.map((node) => (\n        <Node key={node.id} {...node} render={render} />\n      ))}\n    </div>\n  );\n};\n\nconst nodeShape = {\n  title: PropTypes.node.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nnodeShape.children = PropTypes.arrayOf(PropTypes.shape(nodeShape));\n\nTree.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape(nodeShape)),\n  render: PropTypes.func,\n};\n\nTree.defaultProps = {\n  data: [],\n};\n\nexport default Tree;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Tree from '../components/tree';\nimport {\n  getSources,\n  getServiceOfferingNodes,\n  getServiceInstanceNodes,\n  getServiceInventories,\n  getServiceInstance,\n  getServicePlans,\n  getServiceOfferings,\n} from '../api/ansible-tower';\nimport { UPDATE_NODE, SET_DATA } from '../store/action-types/sources-action-types';\nimport { Link } from 'react-router-dom';\nimport { Card, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport CardLoader from '../components/loaders/card-loader';\nimport { paths } from '../routes';\nimport DetailDrawer from '../components/detail-drawer';\n\nfunction createNodeData(node, type) {\n  if (!node) {\n    return;\n  }\n\n  const copy = {};\n  if (node.subCollections) {\n    node.subCollections.forEach((collection) => {\n      copy.children = [\n        ...(copy.children || []),\n        {\n          id: `sub-collection-${collection.type}`,\n          title: collection.type,\n          children: collection.data.data.map((child) => createNodeData(child, collection.type)),\n        },\n      ];\n    });\n  }\n\n  return {\n    ...copy,\n    id: node.id,\n    title: node.name || node.id,\n    ...(type && { type }),\n    ...(node.entityType && { type: node.entityType }),\n    nodeData: node,\n  };\n}\n\nfunction createTreeData(sources) {\n  if (!sources?.data) {\n    return;\n  }\n\n  return sources.data.map((source) => createNodeData(source));\n}\n\nconst TreeView = () => {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState({});\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n  const structure = useSelector(({ sourcesReducer }) => sourcesReducer);\n\n  useEffect(() => {\n    if (!structure?.data || structure?.data?.length === 0) {\n      setLoading(true);\n      getSources()\n        .then((data) => {\n          dispatch({\n            type: SET_DATA,\n            payload: { ...data, data: data.data.map((d) => ({ ...d, entityType: 'sources' })) },\n          });\n          return data.data;\n        })\n        .then((sources) => {\n          const promises = sources.map(({ id }) => {\n            const subCollections = [\n              getServiceOfferings(id).then((data) =>\n                dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-offerings', data } })\n              ),\n              getServicePlans(id).then((data) =>\n                dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-plans', data } })\n              ),\n              getServiceInstance(id).then((data) =>\n                dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-instances', data } })\n              ),\n              getServiceInventories(id).then((data) =>\n                dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-inventories', data } })\n              ),\n              getServiceInstanceNodes(id).then((data) =>\n                dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-instance-nodes', data } })\n              ),\n              getServiceOfferingNodes(id).then((data) =>\n                dispatch({ type: UPDATE_NODE, id, subCollections: { type: 'service-offering-nodes', data } })\n              ),\n            ];\n            return Promise.all(subCollections).then(() => setLoading(false));\n          });\n          return Promise.all(promises);\n        });\n    }\n  }, []);\n  if (loading) {\n    return <CardLoader />;\n  }\n\n  const { entityType } = data;\n\n  const treeData = createTreeData(structure);\n  return (\n    <DetailDrawer open={open} data={data} setOpen={setOpen}>\n      <Card>\n        <CardTitle>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={paths.index}>Topology Inventory</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>Tree view</BreadcrumbItem>\n          </Breadcrumb>\n        </CardTitle>\n        <CardBody>\n          <Tree\n            data={treeData}\n            render={({ title, type, nodeData }) =>\n              type ? (\n                <a\n                  onClick={() => {\n                    setData({ type, entityType, ...nodeData });\n                    setOpen(true);\n                  }}\n                >\n                  {title}\n                </a>\n              ) : (\n                <span>{title}</span>\n              )\n            }\n          />\n        </CardBody>\n      </Card>\n    </DetailDrawer>\n  );\n};\n\nexport default TreeView;\n"],"sourceRoot":""}