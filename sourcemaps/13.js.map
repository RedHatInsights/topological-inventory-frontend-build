{"version":3,"sources":["webpack:///./src/pages/tree-view.js"],"names":["TreeView","isLoaded","useSelector","sourcesReducer","dispatch","useDispatch","sources","shallowEqual","sourceTypes","useEffect","loadSourceTypes","loadSourcesAction","treeData","createTreeData","item","infoNode","structureNode","Array","isArray","map","source","children","forEach","child","name","length","push","label","id","subItem","attributes","transformLabel","key","isSelectable","to","paths","index","isActive","data","onSelect","e","parent","category","loadItemDetail"],"mappings":"8yBA2FeA,UA7CE,WACf,IAAMC,EAAWC,aAAY,qBAAGC,eAAkBF,YAC5CG,EAAWC,cACXC,EAAUJ,aAAY,qBAAGC,eAAoCG,UAASC,KACtEC,EAAcN,aAAY,qBAAGC,eAAoCK,cAAaD,KASpF,GAPAE,qBAAU,WACHR,IACHG,EAASM,eACTN,EAASO,kBAEV,KAEEV,EACH,OAAO,kBAAC,IAAD,MAGT,IAAMW,EAjDe,SAAjBC,EAAkBC,GAAqD,MAA/CC,EAA+C,uDAApCC,IAAeR,EAAqB,uDAAP,GACpE,GAAIS,MAAMC,QAAQJ,GAChB,OAAOA,EAAKK,KAAI,SAACC,GAAD,OAAYP,EAAeO,EAAQL,EAAUP,MAG/D,IAAMa,EAAW,GAEjB,UAAAN,EAASM,gBAAT,SAAmBC,SAAQ,SAACC,GAAU,MACF,GAA9B,UAAAT,EAAKS,EAAMC,aAAX,eAAkBC,QAAS,GAC7BJ,EAASK,KAAK,CACZF,KAAMD,EAAMI,MACZC,GAAIL,EAAMC,KACVH,SAAQ,UAAEP,EAAKS,EAAMC,aAAb,aAAE,EAAkBL,KAAI,SAACU,GAAD,OAAahB,EAAegB,EAASN,EAAOf,WAKlF,IAAIgB,EAAQT,EAASe,YAAchB,EAAKC,EAASe,WAAW,KAAQhB,EAAKU,MAAQV,EAAKc,GAMtF,OAJIb,EAASgB,iBACXP,EAAOT,EAASgB,eAAejB,EAAMN,IAGvC,KACEoB,GAAId,EAAKc,GACTI,IAAKlB,EAAKc,GACVJ,QACIH,EAASI,OAAS,EAAI,CAAEJ,YAAa,IAJ3C,IAKEY,cAAc,IAqBCpB,CAAeP,EAASU,IAAeR,GAExD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAM0B,GAAIC,IAAMC,OAAhB,uBAEF,kBAAC,IAAD,CAAgBC,UAAQ,GAAxB,eAGJ,kBAAC,IAAD,eAEE,kBAAC,IAAD,CACEC,KAAM1B,EACN2B,SAAU,SAACC,EAAG1B,EAAM2B,GAClB,GAAI3B,EAAKmB,aAAc,CACrB,IAAMS,GAAWD,aAAA,EAAAA,EAAQb,KAAM,UAC/BxB,EAASuC,YAAeD,EAAU5B,EAAKc,GAAId,EAAKU","file":"js/13.fd3d469bba50dd82d31f.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\n\nimport { Link } from 'react-router-dom';\nimport { Card, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nimport { structureNode } from '../api/topology-viewer-api';\n\nimport CardLoader from '../components/loaders/card-loader';\nimport { paths } from '../routes';\nimport { loadSourcesAction, loadSourceTypes, loadItemDetail } from '../store/actions';\n\nimport { TreeView as PFTreeView } from '@patternfly/react-core';\n\nconst createTreeData = (item, infoNode = structureNode, sourceTypes = []) => {\n  if (Array.isArray(item)) {\n    return item.map((source) => createTreeData(source, infoNode, sourceTypes));\n  }\n\n  const children = [];\n\n  infoNode.children?.forEach((child) => {\n    if (item[child.name]?.length > 0) {\n      children.push({\n        name: child.label,\n        id: child.name,\n        children: item[child.name]?.map((subItem) => createTreeData(subItem, child, sourceTypes)),\n      });\n    }\n  });\n\n  let name = (infoNode.attributes && item[infoNode.attributes[0]]) || item.name || item.id;\n\n  if (infoNode.transformLabel) {\n    name = infoNode.transformLabel(item, sourceTypes);\n  }\n\n  return {\n    id: item.id,\n    key: item.id,\n    name,\n    ...(children.length > 0 ? { children } : {}),\n    isSelectable: true,\n  };\n};\n\nconst TreeView = () => {\n  const isLoaded = useSelector(({ sourcesReducer: { isLoaded } }) => isLoaded);\n  const dispatch = useDispatch();\n  const sources = useSelector(({ sourcesReducer }) => sourcesReducer.sources, shallowEqual);\n  const sourceTypes = useSelector(({ sourcesReducer }) => sourcesReducer.sourceTypes, shallowEqual);\n\n  useEffect(() => {\n    if (!isLoaded) {\n      dispatch(loadSourceTypes());\n      dispatch(loadSourcesAction());\n    }\n  }, []);\n\n  if (!isLoaded) {\n    return <CardLoader />;\n  }\n\n  const treeData = createTreeData(sources, structureNode, sourceTypes);\n\n  return (\n    <Card>\n      <CardTitle>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={paths.index}>Topology Inventory</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>Tree view</BreadcrumbItem>\n        </Breadcrumb>\n      </CardTitle>\n      <CardBody>\n        Sources\n        <PFTreeView\n          data={treeData}\n          onSelect={(e, item, parent) => {\n            if (item.isSelectable) {\n              const category = parent?.id || 'sources';\n              dispatch(loadItemDetail(category, item.id, item.name));\n            }\n          }}\n        />\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default TreeView;\n"],"sourceRoot":""}